@page "/home"
@page "/"
@using Blazored.SessionStorage;
@using FSH.BlazorWebAssembly.Client.Components.Dialogs;
@using FSH.BlazorWebAssembly.Client.Components.Reservation
@using FSH.BlazorWebAssembly.Client.Components.Shop
@using FSH.BlazorWebAssembly.Client.Pages.Accounts;

@inject IStringLocalizer<Index> L
@inject ISessionStorageService sessionstorage
@inject IMandantsClient MandantsClient
@inject IReservationsClient ReservationsClient

@if (_loaded)
{
    <MudContainer Fixed="true">
        <MudGrid>
@*             <MudStack Class="ml-3" Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                <MudButton OnClick="OpenCashierDialog" Variant="Variant.Filled" Color="Color.Primary">@L["Cashier"] @_cashierRegisterName </MudButton>

                </MudStack>
                <br />
 *@
                <ResQuerys UserCase="Mandant"></ResQuerys>
                <br />
                @if (_mandantId > 0)
            {
                <MudItem xs="12" sm="12" md="12">
                    <FSH.BlazorWebAssembly.Client.Components.VCats.VCatVertical></FSH.BlazorWebAssembly.Client.Components.VCats.VCatVertical>

                </MudItem>

                @* <div class="lp-app-grid"> *@
                <MudPaper Class="py-4 px-6 rounded-lg d-flex align-center">
                    <div class="flex-grow-1">
                        <MudText Typo="Typo.h6">@L["Arrivalstats"]</MudText>
                            <MudItem xs="12" sm="12" md="12">
                                <MudStack Row="true" Spacing="4">

                                    <MudStack Style="min-width:92px;" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.subtitle2">@L["Reservations"]</MudText>
                                        <MudText Typo="Typo.h6">@resStatArr!.ReservationTodayDone!.Value / @resStatArr!.ReservationToday!.Value</MudText>
                                        <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Value="resToday" />
                                    </MudStack>
                                    <MudStack Style="min-width:92px;" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.subtitle2">@L["Rooms"]</MudText>
                                        <MudText Typo="Typo.h6">@resStatArr!.ReservationRoomsTodayDone!.Value / @resStatArr!.ReservationRoomsToday!.Value</MudText>
                                        <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Value="resRoomToday" />
                                    </MudStack>
                                    <MudStack Style="min-width:92px;" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.subtitle2">@L["Adults"]</MudText>
                                        <MudText Typo="Typo.h6">@resStatArr!.ReservationAdultTodayDone!.Value / @resStatArr!.ReservationAdultToday!.Value</MudText>
                                        <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Value="adultToday" />
                                    </MudStack>
                                    <MudStack Style="min-width:92px;" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.subtitle2">@L["Children"]</MudText>
                                        <MudText Typo="Typo.h6">@resStatArr!.ReservationChildTodayDone!.Value / @resStatArr!.ReservationChildToday!.Value</MudText>
                                        <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Value="childToday" />
                                    </MudStack>
                                    <MudStack Style="min-width:92px;" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.subtitle2">@L["XBeds"]</MudText>
                                        <MudText Typo="Typo.h6">@resStatArr!.ReservationExtraBedTodayDone!.Value / @resStatArr!.ReservationExtraBedToday!.Value</MudText>
                                        <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Value="XBedsToday" />

                                    </MudStack>

                                </MudStack>

                            </MudItem>



                        </div>

                        @*                             <div class="d-flex align-end justify-end mud-height-full py-8">
            <MudPaper Height="65%" Width="6px" Square="true" Class="mud-secondary mr-1 rounded-t" />
            <MudPaper Height="52%" Width="6px" Square="true" Class="mud-secondary mr-1 rounded-t" />
            <MudPaper Height="40%" Width="6px" Square="true" Class="mud-secondary mr-1 rounded-t" />
            <MudPaper Height="38%" Width="6px" Square="true" Class="mud-secondary mr-1 rounded-t" />
            <MudPaper Height="36%" Width="6px" Square="true" Class="mud-secondary mr-1 rounded-t" />
            <MudPaper Height="20%" Width="6px" Square="true" Class="mud-secondary mr-1 rounded-t" />
            <MudPaper Height="@GetArrivalProzent("resToday")" Width="6px" Square="true" Class="mud-primary mr-1 rounded-t" />
            <MudPaper Height="@GetArrivalProzent("resTodayDone")" Width="6px" Square="true" Class="mud-primary mr-1 rounded-t" />
            <MudPaper Height="@GetArrivalProzent("resRoomToday")" Width="6px" Square="true" Class="mud-primary mr-1 rounded-t" />
            <MudPaper Height="@GetArrivalProzent("resRoomTodayDone")" Width="6px" Square="true" Class="mud-primary mr-1 rounded-t" />
            </div>
            *@
                    </MudPaper>
                @* </div> *@

                <MudItem xs="12" sm="12" md="12">
                    <SearchReservationsList></SearchReservationsList>

                </MudItem>

            }


            <MudItem xs="12" sm="12" md="12">
                <div class="d-flex justify-center mt-4">
                    <img src="logo-single.png" Style="height:250px" />
                </div>
            </MudItem>

            @*        <MudItem xs="12" sm="12" md="12">
        <MudText Align="Align.Center" Typo="Typo.h5" Class="smaller">@L["fullstackhero's"]</MudText>
        <MudText Align="Align.Center" Typo="Typo.h4">@L["Blazor WebAssembly Boilerplate"]</MudText>

        </MudItem>
        *@
            <MudItem xs="12" sm="12" md="12">
                <MudText Align="Align.Center" Typo="Typo.h5" Class="smaller">@L["Lunnax"]</MudText>
                    <MudText Align="Align.Center" Typo="Typo.h4">@L["ATLAS"]</MudText>
                </MudItem>

                @*        <MudItem xs="12" sm="12" md="12">
        <MudText Align="Align.Center">
        @L["Built with the goodness of"] <MudLink Href="https://www.mudblazor.com" Target="_blank">MudBlazor</MudLink> @L["Component Library"].
        </MudText>
        <MudText Align="Align.Center">
        @L["Compatible with"] <MudLink Href="https://github.com/fullstackhero/dotnet-webapi-boilerplate" Target="_blank">fullstackhero .NET WebAPI Boilerplate v1.</MudLink>
        </MudText>
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
        <div class="mud-typography-align-center">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="https://fullstackhero.net/basics/getting-started/" Target="_blank" StartIcon="@Icons.Material.Filled.Rocket">@L["Get Started"]</MudButton>
        <MudButton Variant="Variant.Outlined" Style="margin-left:5px" Color="Color.Default" Link="https://github.com/fullstackhero/blazor-wasm-boilerplate" Target="_blank" StartIcon="@Icons.Custom.Brands.GitHub">@L["Star on GitHub"]</MudButton>
        </div>
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
        <MudText Align="Align.Center">@L["Version 1.0"]</MudText>
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
        <MudExpansionPanels>
        <MudExpansionPanel Class="mud-elevation-25" Text="@L["Getting Started"]" MaxHeight="150">
        @L["In case you are stuck anywhere or have any queries regarding this implementation, I have compiled a Quick Start Guide for you reference."]
        <MudButton Variant="Variant.Text" DisableElevation="true" Color="Color.Secondary" Link="https://fullstackhero.net/blazor-wasm-boilerplate/general/getting-started" Target="_blank">@L["Read The Guide"]</MudButton>
        </MudExpansionPanel>
        <MudExpansionPanel Class="mud-elevation-25" Text="@L["Important Links"]" MaxHeight="500">
        <MudList Clickable="true">
        <MudListItem Text="@L["Github Repository : Do Not Forget to Leave a Star ;)"]" Href="https://github.com/fullstackhero/blazor-wasm-boilerplate" />
        <MudListItem Text="@L["Quick Start Guide"]" Href="https://fullstackhero.net/blazor-wasm-boilerplate/general/getting-started" />
        </MudList>
        </MudExpansionPanel>
        <MudExpansionPanel Class="mud-elevation-25" Text="@L["Learning Resources"]" MaxHeight="1000">
        @L["Here are few articles that should help you get started with Blazor."]
        <MudList Clickable="true">
        <MudListItem Text="@L["Blazor For Beginners – Getting Started With Blazor"]" Href="https://codewithmukesh.com/blog/getting-started-with-blazor/" />
        <MudListItem Text="@L["Exploring Blazor Project Structure"]" Href="https://codewithmukesh.com/blog/exploring-blazor-project-structure/" />
        <MudListItem Text="@L["Onion Architecture In ASP.NET Core With CQRS – Detailed"]" Href="https://codewithmukesh.com/blog/onion-architecture-in-aspnet-core/" />
        <MudListItem Text="@L["How To Implement Blazor CRUD Using Entity Framework Core?"]" Href="https://codewithmukesh.com/blog/blazor-crud-with-entity-framework-core/" />
        <MudListItem Text="@L["Custom Authentication In Blazor WebAssembly – Detailed"]" Href="https://codewithmukesh.com/blog/authentication-in-blazor-webassembly/" />
        <MudListItem Text="@L["Implementing Blazor CRUD Using Mudblazor Component Library In .NET 5"]" Href="https://codewithmukesh.com/blog/blazor-crud-using-mudblazor/" />
        <MudListItem Text="@L["Building A Chat Application With Blazor, Identity, And SignalR"]" Href="https://codewithmukesh.com/blog/realtime-chat-application-with-blazor/" />
        </MudList>
        </MudExpansionPanel>
        <MudExpansionPanel Class="mud-elevation-25" Text="@L["User Claims"]">
        @L["Application Claims of the currently logged in user."]
        <MudList Dense="true">
        @if (Claims is not null)
        {
        @foreach (var claim in Claims)
        {
        <MudListItem>
        <MudChip>
        @claim.Type
        </MudChip>
        @claim.Value
        </MudListItem>
        }
        }
        </MudList>
        </MudExpansionPanel>
        </MudExpansionPanels>
        </MudItem>
        <MudItem  xs="12" sm="12" md="12">
        <MudAlert Style="margin-top:10px;justify-content:center" Severity="Severity.Info"><MudLink Href="https://github.com/fullstackhero/blazor-wasm-boilerplate">@L["Liked this Boilerplate? Star us on Github!"]</MudLink></MudAlert>
        </MudItem>
        *@
            </MudGrid>
        </MudContainer>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    public IEnumerable<Claim>? Claims { get; set; }
    public int _mandantId { get; set; }
    public int _cashierId { get; set; }
    public bool _loaded { get; set; } = false;
    public MandantDto? _mandantDto { get; set; } = null;
    public string _cashierRegisterName { get; set; }

    public ReservationStatArrivalDto? resStatArr { get; set; }
    public int resToday { get; set; }
    public int resRoomToday { get; set; }
    public int adultToday { get; set; }
    public int childToday { get; set; } = 0;
    public int XBedsToday { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthState;
        Claims = authState.User.Claims;

        _mandantId = Convert.ToInt32(await sessionstorage.GetItemAsStringAsync("currentMandantId"));
        if (_mandantId > 0)
        {
            _mandantDto = await MandantsClient.GetAsync(_mandantId);
        }

        DateTime arrival = Convert.ToDateTime(_mandantDto!.HotelDate!.Value);
        resStatArr = await ReservationsClient.GetReservationStatArrivalAsync(_mandantId, arrival);

        GetStats();

        _loaded = true;
    }

    private void GetStats()
    {
        if (resStatArr!.ReservationToday!.Value > 0)
        {

            double resTotal = Convert.ToDouble(resStatArr!.ReservationToday!.Value);
            double resTodayDone = Convert.ToDouble(resStatArr!.ReservationTodayDone!.Value);

            resToday = Convert.ToInt16((resTodayDone / resTotal) * 100);
        }

        if (resStatArr!.ReservationRoomsToday!.Value > 0)
        {

            double roomsTotal = Convert.ToDouble(resStatArr!.ReservationRoomsToday!.Value);
            double roomsDone = Convert.ToDouble(resStatArr!.ReservationRoomsTodayDone!.Value);

            resRoomToday = Convert.ToInt16((roomsDone / roomsTotal) * 100);
        }

        if (resStatArr!.ReservationAdultToday!.Value > 0)
        {
            double adultTotal = Convert.ToDouble(resStatArr!.ReservationAdultToday!.Value);
            double adultDone = Convert.ToDouble(resStatArr!.ReservationAdultTodayDone!.Value);

            adultToday = Convert.ToInt16((adultDone / adultTotal) * 100);
        }
        else if (resStatArr.ReservationAdultTodayDone > 0)
        {
            adultToday = 100;
            resStatArr.ReservationAdultToday = resStatArr.ReservationAdultTodayDone;
        }


        if (resStatArr!.ReservationChildToday!.Value > 0)
        {
            double childTotal = Convert.ToDouble(resStatArr!.ReservationChildToday!.Value);
            double childDone = Convert.ToDouble(resStatArr!.ReservationChildTodayDone!.Value);

            childToday = Convert.ToInt16((childDone / childTotal) * 100);
        }
        else if (resStatArr.ReservationChildTodayDone > 0)
        {
            childToday = 100;
            resStatArr.ReservationChildToday = resStatArr.ReservationChildTodayDone;
        }

        if (resStatArr!.ReservationExtraBedToday!.Value > 0)
        {
            double XBedsTotal = Convert.ToDouble(resStatArr!.ReservationExtraBedToday!.Value);
            double XBedsDone = Convert.ToDouble(resStatArr!.ReservationExtraBedTodayDone!.Value);

            XBedsToday = Convert.ToInt16((XBedsDone / XBedsTotal) * 100);
        }
        else if (resStatArr.ReservationExtraBedTodayDone > 0)
        {
            XBedsToday = 100;
            resStatArr.ReservationExtraBedToday = resStatArr.ReservationExtraBedTodayDone;
        }

    }

    private async void OpenCashierDialog()
    {
        if (_cashierId == 0)
        {
            int cashierRequest = Convert.ToInt32(await sessionstorage.GetItemAsStringAsync("currentCashierId"));
            if (cashierRequest > 0)
            {
                _cashierId = cashierRequest;
            }
            else
            {
                // Dialog ChashierRegister ausführen und speichern
                var parametersCRDialog = new DialogParameters
                    {
                        ["MandantId"] = _mandantDto.Id,
                        //["reservationDtoChanged"] = reservationDtoChanged,
                    };
                var dialogCR = DialogService.ShowModal<CashierRegisterDialog>(parametersCRDialog);
                var resultCR = await dialogCR.Result;

            }
        }
        _cashierId = Convert.ToInt32(await sessionstorage.GetItemAsStringAsync("currentCashierId"));

        if (_cashierId > 0)
        {
            var currentCashierRegister = await sessionstorage.GetItemAsync<Dictionary<string, string>>("currentCashierRegister");
            _cashierRegisterName = currentCashierRegister["currentCashierRegisterName"];
            var parameters = new DialogParameters
                {
                    ["mandantDto"] = _mandantDto,
                    ["CashierRegisterId"] = Convert.ToInt32(currentCashierRegister["currentCashierRegisterId"]),
                    ["CashierRegisterName"] = currentCashierRegister["currentCashierRegisterName"],
                };

            var dialog = DialogService.ShowModal<CashierDialog>(parameters);
            var result = await dialog.Result;
            StateHasChanged();

        }
    }

}