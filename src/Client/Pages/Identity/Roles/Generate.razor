@page "/generate"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text;
@inject IJSRuntime JS

<h1>Generate Report</h1>

<button class="btn btn-primary" @onclick="GenerateReport">Generate</button>

@if (reportUrl != null)
{
    <a href="@reportUrl" download="@reportFileName">Download Report</a>
}

@code {
    private string reportUrl;
    private string reportFileName;
    private HttpClient httpClient;

    protected override void OnInitialized()
    {
        httpClient = new HttpClient { BaseAddress = new Uri("https://localhost:5001/api/v1/") };
    }

    private async Task GenerateReport()
    {
        // Create a list of PersonAddressReportDto objects
        var reportData = new List<PersonAddressReportDto>
        {
           new PersonAddressReportDto
           {
               FirstName = "Gimi",
               Address1 = "Fan Noli",
               Address2 = "SI"
           },
           new PersonAddressReportDto
           {
               FirstName = "GiBeimi",
               Address1 = "hasasjk Noli",
               Address2 = "Mo"
           }
        };
        // Serialize the reportData to JSON
        var jsonData = JsonSerializer.Serialize(reportData);

        // Create the HTTP content with JSON payload
        var httpContent = new StringContent(jsonData, Encoding.UTF8, "application/json");

        var response = await httpClient.PostAsync("Report/personAddressReport", httpContent);

        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var responseObject = JsonSerializer.Deserialize<ReportResponse>(responseContent);

            var reportBytes = Convert.FromBase64String(responseObject.result.fileContents);

            // Generate a unique file name
            reportFileName = responseObject.result.fileDownloadName;
            var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            var fileName = $"{timestamp}_{reportFileName}";

            // Create a new MemoryStream with the report content
            var memoryStream = new MemoryStream(reportBytes);

            // Create a copy of the MemoryStream for downloading the file
            var downloadStream = new MemoryStream();
            await memoryStream.CopyToAsync(downloadStream);
            downloadStream.Position = 0;

            // Get the MIME type based on the file extension (assuming it's a PDF)
            var mimeType = "application/pdf";

            // Invoke the JavaScript function to trigger the file download
            await JS.InvokeVoidAsync("saveAsFile", fileName, downloadStream.ToArray());
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
        }
    }

    private class PersonAddressReportDto
    {
        public string? Name { get; set; }
        public string? FirstName { get; set; }
        public string? Title { get; set; }
        public string? Address1 { get; set; }
        public string? Address2 { get; set; }
        public string? Zip { get; set; }
        public string? City { get; set; }
        public int? CountryId { get; set; }
        public int? StateRegionId { get; set; }
        public string SalutationName { get; set; }
        public string SalutationLetterGreeting { get; set; }
        public string SalutationLetterClosing { get; set; }
    }

    private class ReportResponse
    {
        public ReportResult result { get; set; }
    }

    private class ReportResult
    {
        public string fileContents { get; set; }
        public string fileDownloadName { get; set; }
    }
}