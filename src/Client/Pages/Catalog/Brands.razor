@page "/catalog/brands"
@attribute [Authorize(Policy = FSHPermissions.Brands.View)]

@inject IStringLocalizer<Brands> L
@inject IBrandsClient BrandsClient

<FshTitle Title="@L["Brands"]" Description="@L["Manage Brands."]" />

<EntityManager TEntity="BrandDto" TFilter="BrandListFilter" Context="@Context">

    <EditFormContent>
        <MudItem xs="12" md="6">
            <MudTextField T="string" For="@(() => context.Name)"
                @bind-Value="context.Name" Label="@L["Name"]" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField For="@(() => context.Description)"
                @bind-Value="context.Description" Label="@L["Description"]" />
        </MudItem>
    </EditFormContent>

</EntityManager>

@code
{
    protected EntityManagerContext<BrandDto, BrandListFilter> Context { get; set; } = default!;

    protected override void OnInitialized() =>
        Context = new(
            fields: new()
            {
                new("Id", L["Id"], brand => brand.Id),
                new("Name", L["Name"], brand => brand.Name),
                new("Description", L["Description"], brand => brand.Description),
            },
            idFunc: brand => brand.Id,
            searchFunc: async filter => (await BrandsClient.SearchAsync(filter)).Adapt<PaginatedResult<BrandDto>>(),
            createFunc: brand => BrandsClient.CreateAsync(brand.Adapt<CreateBrandRequest>()),
            updateFunc: brand => BrandsClient.UpdateAsync(brand.Id, brand.Adapt<UpdateBrandRequest>()),
            deleteFunc: id => BrandsClient.DeleteAsync(id),
            editFormInitializedFunc: null,
            entityName: L["Brand"],
            entityNamePlural: L["Brands"],
            searchPermission: FSHPermissions.Products.Search,
            createPermission: FSHPermissions.Products.Register,
            updatePermission: FSHPermissions.Products.Update,
            deletePermission: FSHPermissions.Products.Remove);
}