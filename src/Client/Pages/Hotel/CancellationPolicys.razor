@page "/hotel/cancellationpolicys"
@using System.Diagnostics
@using Blazored.SessionStorage
@using System.Globalization
@attribute [MustHavePermission(FSHAction.View, FSHResource.Packages)]

@inject IStringLocalizer<CancellationPolicys> L
@inject ICancellationPolicysClient CancellationPolicysClient
@inject ISessionStorageService sessionstorage

<FshTitle Title="@L["CancellationPolicys"]" Description="@L["Manage CancellationPolicys."]" />

<EntityTable TEntity="CancellationPolicyDto" TId="int" TRequest="UpdateCancellationPolicyRequest" Context="@Context">

    <EditFormContent>

            <MudHidden T="int" hidden="hidden" For="@(() => context.MandantId )" @bind-Value="context.MandantId" Label="@L["MandantId"]" />

@*        @if (!Context.AddEditModal.IsCreate) // Edit
        {
            <MudItem xs="2">
                <MudTextField Value="context.Id" ReadOnly DisableUnderLine Label="@L[$"Id"]" />
            </MudItem>
        }
*@
        @if (!Context.AddEditModal.IsCreate) // Edit
        {

            <MudItem xs="8">
                <MudTextField Variant="Variant.Outlined" ReadOnly="true" HelperText="@L["Field Readonly"]" T="string" For="@(() => context.Name)" @bind-Value="context.Name" Label="@L["Name"]" />
            </MudItem>

            <MudItem xs="4">
                <MudTextField Variant="Variant.Outlined" ReadOnly="true" HelperText="@L["Field Readonly"]" T="string" For="@(() => context.Kz)" @bind-Value="context.Kz" Label="@L["Kz"]" />
            </MudItem>
        }
        else // Create
        {            
            <MudItem xs="6">
                <MudTextField Variant="Variant.Outlined" T="string" For="@(() => context.Name)" @bind-Value="context.Name" Label="@L["Name"]" />
            </MudItem>

            <MudItem xs="4">
                <MudTextField Variant="Variant.Outlined" T="string" For="@(() => context.Kz)" @bind-Value="context.Kz" Label="@L["Kz"]" />
            </MudItem>
        }

        <MudItem xs="12" md="12">
            <MudTextField Variant="Variant.Outlined" T="string" Lines="3" For="@(() => context.Description)" @bind-Value="context.Description" Label="@L["Description"]" />
        </MudItem>

        <MudItem xs="12" md="12">
            <MudTextField Variant="Variant.Outlined" T="string" Lines="3" For="@(() => context.Display)" @bind-Value="context.Display" Label="@L["Display"]" />
        </MudItem>

        <MudItem xs="12" md="12">
            <MudTextField Variant="Variant.Outlined" T="string" Lines="3" For="@(() => context.DisplayShort)" @bind-Value="context.DisplayShort" Label="@L["DisplayShort"]" />
        </MudItem>

        <MudItem xs="12" md="12">
            <MudTextField Variant="Variant.Outlined" T="string" Lines="3" For="@(() => context.DisplayHighLight)" @bind-Value="context.DisplayHighLight" Label="@L["DisplayHighLight (; is separator)"]" />
        </MudItem>

        <MudItem xs="12" md="12">
            <MudTextField Variant="Variant.Outlined" T="string" Lines="3" For="@(() => context.ConfirmationText)" @bind-Value="context.ConfirmationText" Label="@L["ConfirmationText"]" />
        </MudItem>

        <MudItem xs="3" md="3">
            <MudNumericField Variant="Variant.Outlined" T="int" Min="1" For="@(() => context.FreeCancellationDays)" @bind-Value="context.FreeCancellationDays" Label="@L["FreeCancellationDays"]" />
        </MudItem>

        <MudItem xs="3" md="3">
            <MudNumericField Variant="Variant.Outlined" T="int" Min="1" For="@(() => context.NoShow)" @bind-Value="context.NoShow" Label="@L["NoShow%"]" />
        </MudItem>

        <MudItem xs="3" md="3">
            <MudNumericField Variant="Variant.Outlined" T="int" Min="1" For="@(() => context.Priority)" @bind-Value="context.Priority" Label="@L["Priority"]" />
        </MudItem>

        <MudItem xs="3" md="3">
            <MudCheckBox T="bool" Color="Color.Secondary" Size="Size.Large" For="@(() => context.IsDefault)" @bind-Checked="context.IsDefault" Label="@L["Default"]" />
        </MudItem>

        @if (context.ChipIcon != null || context.ChipIcon != string.Empty)
        {
            <MudItem xs="2" Class="mt-3">
                <MudChip Icon="@context.ChipIcon" Color="Color.Primary">@context.ChipText</MudChip>
            </MudItem>
        }

        <MudItem xs="4">
            <MudTextField Variant="Variant.Outlined" T="string" For="@(() => context.ChipIcon)" @bind-Value="context.ChipIcon" Label="@L["ChipIcon"]" />
        </MudItem>

        <MudItem xs="6">
            <MudTextField Variant="Variant.Outlined" T="string" For="@(() => context.ChipText)" @bind-Value="context.ChipText" Label="@L["ChipText"]" />
        </MudItem>


    </EditFormContent>

</EntityTable>


@code {
    public CultureInfo _de = CultureInfo.GetCultureInfo("de-DE");
    [Parameter]
    public int _mandantId { get; set; }

    protected EntityServerTableContext<CancellationPolicyDto, int, UpdateCancellationPolicyRequest> Context { get; set; } = default!;

    protected override void OnInitialized() =>
    Context = new(
        entityName: L["CancellationPolicy"],
        entityNamePlural: L["CancellationPolicys"],
        entityResource: FSHResource.Packages,
        fields: new()
            {
                new(CancellationPolicy => CancellationPolicy.Kz, L["Kz"], "Kz"),
                new(CancellationPolicy => CancellationPolicy.Name, L["Name"], "Name"),
                new(CancellationPolicy => CancellationPolicy.IsDefault, L["Default"], "Default"),
                new(CancellationPolicy => CancellationPolicy.Priority, L["Priority"], "Priority"),
                // new(CancellationPolicy => CancellationPolicy.MandantId, L["MandantId"], "MandantId")
            },
        idFunc: CancellationPolicy => CancellationPolicy.Id,
        editNotAsModal: false,
        searchFunc: async filter =>
        {
            var CancellationPolicyfilter = filter.Adapt<SearchCancellationPolicysRequest>();
            CancellationPolicyfilter.MandantId = Convert.ToInt32(await sessionstorage.GetItemAsStringAsync("currentMandantId"));
            _mandantId = CancellationPolicyfilter.MandantId;
            var result = await CancellationPolicysClient.SearchAsync(CancellationPolicyfilter);

            return result.Adapt<PaginationResponse<CancellationPolicyDto>>();
        },
        getDefaultsFunc: () => Task.FromResult(new UpdateCancellationPolicyRequest()
        {
            // MandantId = _mandantId,
        }),
        createFunc: async CancellationPolicy =>
        {
            CancellationPolicy.MandantId = _mandantId;
            await CancellationPolicysClient.CreateAsync(CancellationPolicy.Adapt<CreateCancellationPolicyRequest>());
        },
        updateFunc: async (id, CancellationPolicy) =>
        {
            await CancellationPolicysClient.UpdateAsync(id, CancellationPolicy.Adapt<UpdateCancellationPolicyRequest>());
        },
        exportAction: string.Empty);
}
