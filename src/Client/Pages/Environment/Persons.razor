@page "/environment/persons"
@using Blazored.SessionStorage;
@using FSH.BlazorWebAssembly.Client.Components.Person

@inject ISessionStorageService sessionstorage
@inject IPersonsClient PersonsClient
@inject ISnackbar Snackbar

namespace FSH.BlazorWebAssembly.Client.Pages.Environment;


<h3>Persons</h3>

<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="string" Label="US States" @bind-Value="value1" SearchFunc="@Search1"
                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                         CoerceText="@coerceText" CoerceValue="@coerceValue" />
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete T="string" Label="US States" @bind-Value="value2" SearchFunc="@Search2"
                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                         CoerceText="@coerceText" CoerceValue="@coerceValue"
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
    </MudItem>
@*    <MudItem xs="12" sm="6" md="4">
        <MudAutocomplete Label="IEnumerable<PersonDto>" @bind-Value="searchValue" SearchFunc="@SearchPerson"
                         ResetValueOnEmptyText="@resetValueOnEmptyText" ToStringFunc="@GetPersonName"
                         CoerceText="@coerceText" CoerceValue="@coerceValue" Clearable="true"
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
    </MudItem>
*@    <MudItem xs="12" sm="6" md="4">
            <PersonAutoComplete @bind-Value="SearchPersonId" />
    </MudItem>



</MudGrid>

@code {

    private bool resetValueOnEmptyText = true;
    private bool coerceText;
    private bool coerceValue;
    private string? value1, value2, value3;
    private string? searchValue;
    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };
    private int _searchPersonId;


    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private int SearchPersonId
    {
        get => _searchPersonId;
        set
        {
            _searchPersonId = value;
            //_ = _table.ReloadDataAsync();
        }
    }


    //public class PersonAutoComplete : MudAutocomplete<int>
    //{
    //    [Inject]
    //    private IStringLocalizer<PersonAutoComplete> L { get; set; } = default!;
    //    [Inject]
    //    private IPersonsClient PersonsClient { get; set; } = default!;
    //    [Inject]
    //    private ISnackbar Snackbar { get; set; } = default!;
    //    private List<PersonDto> _persons = new List<PersonDto>();


    //    public override Task SetParametersAsync(ParameterView parameters)
    //    {
    //        Label = L["Person"];
    //        Variant = Variant.Filled;
    //        Dense = true;
    //        Margin = Margin.Dense;
    //        ResetValueOnEmptyText = true;
    //        SearchFunc = SearchPerson;
    //        ToStringFunc = GetPersonName;
    //        Clearable = true;
    //        return base.SetParametersAsync(parameters);
    //    }

    //    private async Task<IEnumerable<int>> SearchPerson(string value)
    //    {
    //        var filter = new SearchPersonsRequest
    //            {
    //                PageSize = 20,
    //                SearchString = value
    //                //AdvancedSearch = new() { Fields = new[] { "name" }, Keyword = value }
    //            };

    //        if (await ApiHelper.ExecuteCallGuardedAsync(
    //                () => PersonsClient.SearchAsync(filter), Snackbar)
    //            is PaginationResponseOfPersonDto response)
    //        {
    //            _persons = response.Data.ToList();
    //        }

    //        return _persons.Select(x => x.Id);
    //    }

    //    private string GetPersonName(int id) =>
    //_persons.Find(b => b.Id == id)?.Name ?? string.Empty;


    //}

}
